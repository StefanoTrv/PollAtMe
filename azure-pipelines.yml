# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  - dev
  - fix/*
  - feature/*

pool:
  vmImage: ubuntu-latest
variables:
  PYTHON_VERSION: '3.10'
  DB_ENGINE: 'postgresql'
  DB_NAME: 'pollatme-azure'
  DB_USER: 'pollatme-azure'
  DB_PASSWORD: 'pollatme-azure'
  DB_HOST: 'localhost'
  DB_PORT: 5432
  TIME_ZONE: 'Europe/Rome'
  USE_TZ: 1


resources:
  containers:
    - container: postgres
      image: postgres:15-alpine
      env:
        POSTGRES_USER: $(DB_USER)
        POSTGRES_DB: $(DB_NAME)
        POSTGRES_PASSWORD: $(DB_PASSWORD)
      ports:
        - 5432:5432

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(PYTHON_VERSION)'
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

- script: |
    python -m pip install --upgrade pip setuptools wheel
    pip install -r requirements/dev.txt
    pip install pytest-azurepipelines
    pip install pytest-cov
  displayName: 'Install prerequisites'

- script: |
    pushd $(projectRoot)
    mypy .
  displayName: 'Run mypy lint'

- script: |
    pushd '$(projectRoot)'
    pytest --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish test results'
  condition: succeededOrFailed()

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'